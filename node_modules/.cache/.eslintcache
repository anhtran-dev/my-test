[{"D:\\xampp\\htdocs\\my-app\\src\\index.js":"1","D:\\xampp\\htdocs\\my-app\\src\\reportWebVitals.js":"2","D:\\xampp\\htdocs\\my-app\\src\\App.js":"3","D:\\xampp\\htdocs\\my-app\\src\\components\\LOL.js":"4","D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\apple-pay.js":"5","D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\google-pay.js":"6","D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\google-pay-v1.js":"7","D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\StatusMessages.js":"8","D:\\xampp\\htdocs\\my-app\\src\\components\\LOL2.js":"9","D:\\xampp\\htdocs\\my-app\\src\\components\\FIND-STAR.js":"10","D:\\xampp\\htdocs\\my-app\\src\\components\\ERP.js":"11"},{"size":1063,"mtime":1681406547310,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":634,"mtime":1704188287313,"results":"15","hashOfConfig":"16"},{"size":21809,"mtime":1689242206651,"results":"17","hashOfConfig":"13"},{"size":3384,"mtime":1681050220683,"results":"18","hashOfConfig":"13"},{"size":3014,"mtime":1680935005060,"results":"19","hashOfConfig":"13"},{"size":3671,"mtime":1680937041666,"results":"20","hashOfConfig":"13"},{"size":1257,"mtime":1681046529234,"results":"21","hashOfConfig":"13"},{"size":5992,"mtime":1681456343839,"results":"22","hashOfConfig":"13"},{"size":9579,"mtime":1692263220194,"results":"23","hashOfConfig":"13"},{"size":6350,"mtime":1704251366887,"results":"24","hashOfConfig":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6vijta",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2y6snw",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"41","usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\xampp\\htdocs\\my-app\\src\\index.js",[],"D:\\xampp\\htdocs\\my-app\\src\\reportWebVitals.js",[],["50","51"],"D:\\xampp\\htdocs\\my-app\\src\\App.js",["52"],"D:\\xampp\\htdocs\\my-app\\src\\components\\LOL.js",["53","54"],"D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\apple-pay.js",["55","56"],"import React, {useEffect, useState} from 'react';\r\nimport {useStripe, useElements, PaymentRequestButtonElement} from '@stripe/react-stripe-js'\r\nimport StatusMessages, {useMessages} from './StatusMessages';\r\n\r\nfunction ApplePay(props) {\r\n      const stripe = useStripe()\r\n      const element = useElements()\r\n      const [paymentRequest, setPaymentRequest] = useState(null)\r\n      const [messages, addMessage] = useMessages();\r\n\r\n      useEffect(() => {\r\n            if (!stripe || !element) return;\r\n            const pr = stripe.paymentRequest({\r\n                  currency: 'usd',\r\n                  country: 'US',\r\n                  requestPayerEmail: true,\r\n                  requestPayerName: true,\r\n                  total: {\r\n                        label: 'Demo payment',\r\n                        amount: 1999\r\n                  }\r\n            })\r\n            pr.canMakePayment().then((result) => {\r\n                  console.log('result', result);\r\n                  if (result) {\r\n                        setPaymentRequest(pr)\r\n                  }\r\n            }).catch((err) => {\r\n                  console.log('err', err);\r\n            })\r\n\r\n            pr.on('paymentmethod', async (e) => {\r\n                  const {error: backendError, clientSecret} = await fetch(\r\n                        '/create-payment-intent',\r\n                        {\r\n                              method: 'POST',\r\n                              headers: {\r\n                                    'Content-Type': 'application/json',\r\n                              },\r\n                              body: JSON.stringify({\r\n                                    paymentMethodType: 'card',\r\n                                    currency: 'usd',\r\n                              }),\r\n                        }\r\n                  ).then((r) => r.json());\r\n\r\n                  if (backendError) {\r\n                        addMessage(backendError.message);\r\n                        return;\r\n                  }\r\n\r\n                  addMessage('Client secret returned');\r\n\r\n                  const {\r\n                        error: stripeError,\r\n                        paymentIntent,\r\n                  } = await stripe.confirmCardPayment(clientSecret, {\r\n                        payment_method: e.paymentMethod.id,\r\n                  }, {handleActions: false});\r\n\r\n                  if (stripeError) {\r\n                        // Show error to your customer (e.g., insufficient funds)\r\n                        addMessage(stripeError.message);\r\n                        return;\r\n                  }\r\n\r\n                  // Show a success message to your customer\r\n                  // There's a risk of the customer closing the window before callback\r\n                  // execution. Set up a webhook or plugin to listen for the\r\n                  // payment_intent.succeeded event that handles any business critical\r\n                  // post-payment actions.\r\n                  console.log('paymentIntent::', paymentIntent);\r\n                  addMessage(`Payment ${paymentIntent.status}: ${paymentIntent.id}`);\r\n            });\r\n\r\n\r\n      }, [stripe, element, addMessage])\r\n\r\n      return (\r\n            <div>\r\n                  <h1>Apple pay</h1>\r\n\r\n                  {paymentRequest && <PaymentRequestButtonElement options={{paymentRequest}}/>}\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default ApplePay;","D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\google-pay.js",[],"D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\google-pay-v1.js",["57","58"],"'use strict';\r\n\r\nimport React, {useEffect} from 'react';\r\n\r\nfunction GooglePayV1(props) {\r\n      const onGooglePayLoaded = () => {\r\n            const paymentsClient = new window.google.payments.api.PaymentsClient({\r\n                  environment: 'TEST', // or 'PRODUCTION'\r\n            });\r\n\r\n            const tokenizationSpecification = {\r\n                  type: 'PAYMENT_GATEWAY',\r\n                  parameters: {\r\n                        gateway: 'example',\r\n                        gatewayMerchantId: 'exampleGatewayMerchantId',\r\n                  },\r\n            }\r\n\r\n            const cardPaymentMethod = {\r\n                  type: 'CARD',\r\n                  parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: ['MASTERCARD', 'VISA'],\r\n                  },\r\n                  tokenizationSpecification: tokenizationSpecification\r\n            }\r\n\r\n            const googlePayConfiguration = {\r\n                  apiVersion: 2,\r\n                  apiVersionMinor: 0,\r\n                  allowedPaymentMethods: [cardPaymentMethod]\r\n            }\r\n\r\n\r\n\r\n            const onPaymentDataChanged = (paymentData) => {\r\n                  console.log('onPaymentDataChanged', paymentData);\r\n            };\r\n\r\n            paymentsClient.isReadyToPay(googlePayConfiguration)\r\n                  .then(response => {\r\n                        console.log('response.result', response.result);\r\n                        const paymentDataRequest = {\r\n                              ...googlePayConfiguration,\r\n                              merchantInfo: {\r\n                                    merchantName: 'Example Merchant',\r\n                                    merchantId: 'BCR2DN4TUT277F34',\r\n                              },\r\n                              transactionInfo: {\r\n                                    totalPriceStatus: 'FINAL',\r\n                                    totalPrice: '1.00',\r\n                                    currencyCode: 'USD',\r\n                                    countryCode: 'US'\r\n                              },\r\n                        };\r\n                        const button = paymentsClient.createButton({\r\n                              onClick: () => {\r\n                                    paymentsClient.loadPaymentData(paymentDataRequest).then((paymentData) => {\r\n                                          console.log('loadPaymentData', paymentData);\r\n                                    });\r\n                              },\r\n                              buttonColor: 'black',\r\n                              buttonType: 'long',\r\n                              buttonSizeMode: 'fill',\r\n                        });\r\n\r\n                        button.addEventListener('paymentmethodchange', (event) => {\r\n                              const paymentMethod = event.paymentMethod;\r\n                              console.log('paymentmethodchange', paymentMethod);\r\n                        });\r\n\r\n                        document.getElementById('google-pay-button').appendChild(button);\r\n                  })\r\n                  .catch(err => {\r\n                        console.error('error', err);\r\n                  })\r\n      };\r\n\r\n      useEffect(() => {\r\n            const script = document.createElement('script');\r\n            script.src = 'https://pay.google.com/gp/p/js/pay.js';\r\n            script.addEventListener('load', () => {\r\n                  onGooglePayLoaded();\r\n            });\r\n            document.body.appendChild(script);\r\n      }, [])\r\n      return (\r\n            <div id=\"google-pay-button\"></div>\r\n      );\r\n}\r\n\r\nexport default GooglePayV1;","D:\\xampp\\htdocs\\my-app\\src\\components\\payment\\StatusMessages.js",[],"D:\\xampp\\htdocs\\my-app\\src\\components\\LOL2.js",["59","60","61","62","63","64","65","66","67","68","69","70"],"D:\\xampp\\htdocs\\my-app\\src\\components\\FIND-STAR.js",["71","72"],"D:\\xampp\\htdocs\\my-app\\src\\components\\ERP.js",["73","74","75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":16,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"84","line":9,"column":12,"nodeType":"82","messageId":"83","endLine":9,"endColumn":18},{"ruleId":"80","severity":1,"message":"85","line":9,"column":21,"nodeType":"82","messageId":"83","endLine":9,"endColumn":30},{"ruleId":"80","severity":1,"message":"86","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":22},{"ruleId":"80","severity":1,"message":"87","line":9,"column":14,"nodeType":"82","messageId":"83","endLine":9,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":1,"column":1,"nodeType":"90","messageId":"91","endLine":1,"endColumn":14,"fix":"92"},{"ruleId":"80","severity":1,"message":"93","line":36,"column":19,"nodeType":"82","messageId":"83","endLine":36,"endColumn":39},{"ruleId":"80","severity":1,"message":"84","line":9,"column":12,"nodeType":"82","messageId":"83","endLine":9,"endColumn":18},{"ruleId":"80","severity":1,"message":"85","line":9,"column":21,"nodeType":"82","messageId":"83","endLine":9,"endColumn":30},{"ruleId":"80","severity":1,"message":"94","line":16,"column":13,"nodeType":"82","messageId":"83","endLine":16,"endColumn":24},{"ruleId":"80","severity":1,"message":"95","line":30,"column":13,"nodeType":"82","messageId":"83","endLine":30,"endColumn":23},{"ruleId":"80","severity":1,"message":"96","line":48,"column":13,"nodeType":"82","messageId":"83","endLine":48,"endColumn":23},{"ruleId":"80","severity":1,"message":"97","line":64,"column":13,"nodeType":"82","messageId":"83","endLine":64,"endColumn":23},{"ruleId":"80","severity":1,"message":"98","line":83,"column":13,"nodeType":"82","messageId":"83","endLine":83,"endColumn":25},{"ruleId":"80","severity":1,"message":"99","line":98,"column":13,"nodeType":"82","messageId":"83","endLine":98,"endColumn":22},{"ruleId":"80","severity":1,"message":"100","line":112,"column":13,"nodeType":"82","messageId":"83","endLine":112,"endColumn":23},{"ruleId":"80","severity":1,"message":"101","line":128,"column":13,"nodeType":"82","messageId":"83","endLine":128,"endColumn":25},{"ruleId":"80","severity":1,"message":"102","line":153,"column":13,"nodeType":"82","messageId":"83","endLine":153,"endColumn":21},{"ruleId":"80","severity":1,"message":"103","line":168,"column":13,"nodeType":"82","messageId":"83","endLine":168,"endColumn":24},{"ruleId":"80","severity":1,"message":"84","line":9,"column":12,"nodeType":"82","messageId":"83","endLine":9,"endColumn":18},{"ruleId":"80","severity":1,"message":"85","line":9,"column":21,"nodeType":"82","messageId":"83","endLine":9,"endColumn":30},{"ruleId":"80","severity":1,"message":"84","line":9,"column":12,"nodeType":"82","messageId":"83","endLine":9,"endColumn":18},{"ruleId":"80","severity":1,"message":"85","line":9,"column":21,"nodeType":"82","messageId":"83","endLine":9,"endColumn":30},{"ruleId":"80","severity":1,"message":"104","line":50,"column":13,"nodeType":"82","messageId":"83","endLine":50,"endColumn":26},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'StatusMessages' is defined but never used.","'messages' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"107","text":"108"},"'onPaymentDataChanged' is assigned a value but never used.","'readMessage' is assigned a value but never used.","'disconnect' is assigned a value but never used.","'handleJoin' is assigned a value but never used.","'handleChat' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'leaveRoom' is assigned a value but never used.","'addComment' is assigned a value but never used.","'replyComment' is assigned a value but never used.","'likePost' is assigned a value but never used.","'likeComment' is assigned a value but never used.","'showListGroup' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[0,13],""]