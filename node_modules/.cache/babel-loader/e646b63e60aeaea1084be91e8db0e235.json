{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\my-app\\\\src\\\\components\\\\payment\\\\apple-pay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useStripe, useElements, PaymentRequestButtonElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ApplePay(props) {\n  _s();\n\n  const stripe = useStripe();\n  const element = useElements();\n  const [paymentRequest, setPaymentRequest] = useState(null);\n  useEffect(() => {\n    if (!stripe || !element) return;\n    const pr = stripe.paymentRequest({\n      currency: 'usd',\n      country: 'US',\n      requestPayerEmail: true,\n      requestPayerName: true,\n      total: {\n        label: 'Demo payment',\n        amount: 1999\n      }\n    });\n    pr.canMakePayment().then(result => {\n      console.log('result', result);\n\n      if (result) {\n        setPaymentRequest(pr);\n      }\n    }).catch(err => {\n      console.log('err', err);\n    });\n    pr.on('paymentmethod', async e => {\n      const {\n        error: backendError,\n        clientSecret\n      } = await fetch('/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          paymentMethodType: 'card',\n          currency: 'usd'\n        })\n      }).then(r => r.json());\n\n      if (backendError) {\n        addMessage(backendError.message);\n        return;\n      }\n\n      addMessage('Client secret returned');\n      const {\n        error: stripeError,\n        paymentIntent\n      } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: e.paymentMethod.id\n      }, {\n        handleActions: false\n      });\n\n      if (stripeError) {\n        // Show error to your customer (e.g., insufficient funds)\n        addMessage(stripeError.message);\n        return;\n      } // Show a success message to your customer\n      // There's a risk of the customer closing the window before callback\n      // execution. Set up a webhook or plugin to listen for the\n      // payment_intent.succeeded event that handles any business critical\n      // post-payment actions.\n\n\n      addMessage(`Payment ${paymentIntent.status}: ${paymentIntent.id}`);\n    });\n  }, [stripe, element, addMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Apple pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }, this), paymentRequest && /*#__PURE__*/_jsxDEV(PaymentRequestButtonElement, {\n      options: {\n        paymentRequest\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 13\n  }, this);\n}\n\n_s(ApplePay, \"KVJwM/NpEZbzxPjWFZPccwjahF4=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = ApplePay;\nexport default ApplePay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApplePay\");","map":{"version":3,"sources":["D:/xampp/htdocs/my-app/src/components/payment/apple-pay.js"],"names":["React","useEffect","useState","useStripe","useElements","PaymentRequestButtonElement","ApplePay","props","stripe","element","paymentRequest","setPaymentRequest","pr","currency","country","requestPayerEmail","requestPayerName","total","label","amount","canMakePayment","then","result","console","log","catch","err","on","e","error","backendError","clientSecret","fetch","method","headers","body","JSON","stringify","paymentMethodType","r","json","addMessage","message","stripeError","paymentIntent","confirmCardPayment","payment_method","paymentMethod","id","handleActions","status"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useStripe, useElements, PaymentRequestButtonElement} from '@stripe/react-stripe-js'\r\n\r\nfunction ApplePay(props) {\r\n      const stripe = useStripe()\r\n      const element = useElements()\r\n      const [paymentRequest, setPaymentRequest] = useState(null)\r\n\r\n      useEffect(() => {\r\n            if(!stripe || !element) return;\r\n            const pr = stripe.paymentRequest({\r\n                  currency: 'usd',\r\n                  country : 'US',\r\n                  requestPayerEmail: true,\r\n                  requestPayerName : true,\r\n                  total : {\r\n                        label : 'Demo payment',\r\n                        amount : 1999\r\n                  }\r\n            })\r\n            pr.canMakePayment().then((result) => {\r\n                  console.log('result', result);\r\n                  if(result){\r\n                        setPaymentRequest(pr)\r\n                  }\r\n            }).catch((err) => {\r\n                  console.log('err', err);\r\n            })\r\n\r\n            pr.on('paymentmethod', async (e) => {\r\n                  const {error: backendError, clientSecret} = await fetch(\r\n                        '/create-payment-intent',\r\n                        {\r\n                              method: 'POST',\r\n                              headers: {\r\n                                    'Content-Type': 'application/json',\r\n                              },\r\n                              body: JSON.stringify({\r\n                                    paymentMethodType: 'card',\r\n                                    currency: 'usd',\r\n                              }),\r\n                        }\r\n                  ).then((r) => r.json());\r\n\r\n                  if (backendError) {\r\n                        addMessage(backendError.message);\r\n                        return;\r\n                  }\r\n\r\n                  addMessage('Client secret returned');\r\n\r\n                  const {\r\n                        error: stripeError,\r\n                        paymentIntent,\r\n                  } = await stripe.confirmCardPayment(clientSecret, {\r\n                        payment_method: e.paymentMethod.id,\r\n                  }, { handleActions: false });\r\n\r\n                  if (stripeError) {\r\n                        // Show error to your customer (e.g., insufficient funds)\r\n                        addMessage(stripeError.message);\r\n                        return;\r\n                  }\r\n\r\n                  // Show a success message to your customer\r\n                  // There's a risk of the customer closing the window before callback\r\n                  // execution. Set up a webhook or plugin to listen for the\r\n                  // payment_intent.succeeded event that handles any business critical\r\n                  // post-payment actions.\r\n                  addMessage(`Payment ${paymentIntent.status}: ${paymentIntent.id}`);\r\n            });\r\n\r\n\r\n      }, [stripe, element, addMessage])\r\n\r\n      return (\r\n            <div>\r\n                  <h1>Apple pay</h1>\r\n\r\n                  {paymentRequest && <PaymentRequestButtonElement options={{paymentRequest}} />}\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default ApplePay;"]},"metadata":{},"sourceType":"module"}